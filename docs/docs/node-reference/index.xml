<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Node Reference on</title><link>https://luistar.github.io/knot/docs/node-reference/</link><description>Recent content in Node Reference on</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Tue, 06 Oct 2020 08:48:45 +0000</lastBuildDate><atom:link href="https://luistar.github.io/knot/docs/node-reference/index.xml" rel="self" type="application/rss+xml"/><item><title>Trajectory Partitioner</title><link>https://luistar.github.io/knot/docs/node-reference/trajectory-partitioner/trajectory-partitioner/</link><pubDate>Tue, 10 May 2022 15:21:01 +0200</pubDate><guid>https://luistar.github.io/knot/docs/node-reference/trajectory-partitioner/trajectory-partitioner/</guid><description>⚠️
This documentation page is currently under construction.
--
Node description This node takes as input a collection of Floating Car Data (FCD) from possibly many vehicles and partitions it into subsets, each representing a distinct trajectory.
Configuration options Partitioning strategy This option allows users to select a trajectory partitioning strategy. Currently, only one option (default) is supported. The default strategy splits the stream of GPS positions from a given vehicles into different trajectories everytime the vehicle remains stationary for more time than a customizable threshold.</description></item><item><title>Trajectory Calculator</title><link>https://luistar.github.io/knot/docs/node-reference/trajectory-manipulator/trajectory-manipulator/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>https://luistar.github.io/knot/docs/node-reference/trajectory-manipulator/trajectory-manipulator/</guid><description>⚠️
This documentation page is currently under construction.
--
Node description This Node takes as input a table with the same structure as the &amp;ldquo;Input data augmented with a Trajectory ID&amp;rdquo; output of the &amp;ldquo;Trajectory Partitioner&amp;rdquo; node and computes vehicular trajectories according to a customizable strategy, producing in output a new set of trajectories encoded as WKT Linestrings. As for the routing strategies, currently only &amp;ldquo;shortest path&amp;rdquo; is supported. This strategy considers only the first and the last points in the original trajectory, and computes the shortest path between them.</description></item><item><title>Map Matcher</title><link>https://luistar.github.io/knot/docs/node-reference/map-matcher/map-matcher/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>https://luistar.github.io/knot/docs/node-reference/map-matcher/map-matcher/</guid><description>⚠️
This documentation page is currently under construction.
--
Node description This node takes a route, encoded as a WKT Linestring, and matches it to a sequence of traversed OSM road segments, that can be analyzed by the coverage analyzer nodes in KNOT.
Configuration options Coordinate pair format The setting informs the node about the type of coordinate pairs contained in the Linestring. Either {lon,lat} or {lon,lat}. Osm Data Path The path in which the .</description></item><item><title>Segment Coverage Analyzer</title><link>https://luistar.github.io/knot/docs/node-reference/segment-coverage-analyzer/segment-coverage-analyzer/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>https://luistar.github.io/knot/docs/node-reference/segment-coverage-analyzer/segment-coverage-analyzer/</guid><description>⚠️
This documentation page is currently under construction.
--
Node description The node takes as input a set of map matcher trajectories, possibly computed by the KNOT Map Matcher node. The node computes as coverage metrics both the number of visits for each segment, and the average timegap between subsequent visits.
Input ports Input port Map-Matched Trajectories - The input table must have the following columns:
an integer representing the vehicle id.</description></item><item><title>Grid Coverage Analyzer</title><link>https://luistar.github.io/knot/docs/node-reference/grid-coverage-analyzer/grid-coverage-analyzer/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>https://luistar.github.io/knot/docs/node-reference/grid-coverage-analyzer/grid-coverage-analyzer/</guid><description>⚠️
This documentation page is currently under construction.
--
Given a set of map-matched trajectories, splits a geographic area into a grid and computes how often each grid cell is visited.
Node description This node allows users to define a custom grid over a given geographical area by specifying a bounding box, a number of rows and a number of columns. It then proceeds to compute the number of times each grid cell was visited by one of the agents performing the input map-matched trajectories.</description></item><item><title>Bounding Box Filter</title><link>https://luistar.github.io/knot/docs/node-reference/bounding-box-filter/bouding-box-geometry-filter/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>https://luistar.github.io/knot/docs/node-reference/bounding-box-filter/bouding-box-geometry-filter/</guid><description>Node description This node takes as input a table with a column containing geometry objects encoded in Well Know Text (WKT) format and the coordinates of a bounding box. The node outputs a filtered version of the input table like, containing only entries for which the geometry is contained in the given bounding box.
Configuration options Geometry Column Column containing geometry objects encoded in WKT format. Coordinate Input Format Either {lon, lat} or {lat, lon}, accordingly to the input format.</description></item></channel></rss>